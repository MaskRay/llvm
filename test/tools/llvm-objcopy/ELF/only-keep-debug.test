# RUN: yaml2obj %s -o %t
# RUN: llvm-objcopy --only-keep-debug %t %t.dbg
# RUN: llvm-readelf -S -l %t.dbg | FileCheck %s
# RUN: llvm-objdump -s %t.dbg | FileCheck --check-prefix=CONTENTS %s
# RUN: llvm-strip --only-keep-debug %t -o %t.dbg2
# RUN: cmp %t.dbg %t.dbg2

## SHF_ALLOC sections that are not SHT_NOTE become SHT_NOBITS.
## They do not occupy space in the output.

# CHECK:      Name          Type     Address          Off    Size   ES Flg Lk Inf Al
# CHECK:      .note         NOTE     0000000000000480 000040 000001 00   A  0   0  0
# CHECK-NEXT: .text         NOBITS   0000000000000481 000041 000001 00  AX  0   0  0
# CHECK-NEXT: .tdata        NOBITS   0000000000001400 000080 000007 00 WAT  0   0 128
# CHECK-NEXT: .bss          NOBITS   0000000000001420 000060 00003f 00  WA  0   0 32
# CHECK-NEXT: .debug_abbrev PROGBITS 0000000000000000 000041 000001 00      0   0  0

## sh_offset of .debug_frame advances to the next multiple of sh_addralign.
# CHECK-NEXT: .debug_frame  PROGBITS 0000000000000000 000048 000001 00      0   0  8
# CHECK-NEXT: .debug_info   PROGBITS 0000000000000000 000049 000001 00      0   0  0
# CHECK-NEXT: .comment      PROGBITS 0000000000000000 00004a 000001 00      0   0  0
# CHECK-NEXT: .symtab       SYMTAB   0000000000000000 000050 000030 18     10   2  8
# CHECK-NEXT: .strtab       STRTAB   0000000000000000 000080 000005 00      0   0  1
# CHECK-NEXT: .shstrtab     STRTAB   0000000000000000 000085 000063 00      0   0  1

## GNU objcopy rewrites program headers to make p_offset/p_filesz match section headers.
## We just delete program headers. They are not used by debuggers.
# CHECK:      There are 0 program headers, starting at offset 0

## Contents of SHT_NOTE and non-SHF_ALLOC sections are kept.

# CONTENTS:      Contents of section .note:
# CONTENTS-NEXT:  0480 01
# CONTENTS:      Contents of section .debug_abbrev:
# CONTENTS-NEXT:  0000 02
# CONTENTS-NEXT: Contents of section .debug_frame:
# CONTENTS-NEXT:  0000 03
# CONTENTS-NEXT: Contents of section .debug_info:
# CONTENTS-NEXT:  0000 04
# CONTENTS-NEXT: Contents of section .comment:
# CONTENTS-NEXT:  0000 05

!ELF
FileHeader:
  Class:     ELFCLASS64
  Data:      ELFDATA2LSB
  Type:      ET_DYN
  Machine:   EM_X86_64
Sections:
  - Name:         .note
    Type:         SHT_NOTE
    Flags:        [ SHF_ALLOC ]
    Address:      0x480           # Ensure Address=Offset
    Content:      01
  - Name:         .text
    Type:         SHT_PROGBITS
    Flags:        [ SHF_ALLOC, SHF_EXECINSTR ]
    Address:      0x481           # Ensure Address=Offset
    Content:      c3
  - Name:         .tdata
    Type:         SHT_PROGBITS
    Flags:        [ SHF_ALLOC, SHF_WRITE, SHF_TLS ]
    Address:      0x1400          # Ensure Address=0x1000+Offset
    AddressAlign: 128
    Size:         7
  - Name:         .bss
    Type:         SHT_NOBITS
    Flags:        [ SHF_ALLOC, SHF_WRITE ]
    Address:      0x1420          # Ensure Address=0x1000+Offset
    AddressAlign: 32
    Size:         63
  - Name:         .debug_abbrev
    Type:         SHT_PROGBITS
    Content:      02
  - Name:         .debug_frame
    Type:         SHT_PROGBITS
    AddressAlign: 8
    Content:      03
  - Name:         .debug_info
    Type:         SHT_PROGBITS
    Content:      04
  - Name:         .comment
    Type:         SHT_PROGBITS
    Content:      05
Symbols:
  - Name: foo     # A dummy symbol to test we don't strip .symtab
ProgramHeaders:
  - Type:     PT_LOAD
    Flags:    [ PF_R, PF_X ]
    Offset:   0
    Align:    4096
    Sections:
      - Section: .note
      - Section: .text
  - Type:     PT_LOAD
    Flags:    [ PF_R, PF_W ]
    VAddr:    0x1400    # Ensure Offset=VAddr (mod Align) if Offset changes
    Align:    4096
    Sections:
      - Section: .tdata
      - Section: .bss
  - Type:     PT_TLS
    Flags:    [ PF_R, PF_W ]
    VAddr:    0x1480    # Ensure Offset=VAddr (mod Align) if Offset changes
    Sections:
      - Section: .tdata
  - Type:     PT_NOTE
    VAddr:    0x480
    Sections:
      - Section: .note
